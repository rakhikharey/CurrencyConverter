//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cconvert.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class cconverterEntities : DbContext
    {
        public cconverterEntities()
            : base("name=cconverterEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<sourcemaster> sourcemasters { get; set; }
        public virtual DbSet<logindetail> logindetails { get; set; }
        public virtual DbSet<CurRate> CurRates { get; set; }
    
        public virtual int disablesource(Nullable<long> sourcetodisable, string accesskey, Nullable<bool> status)
        {
            var sourcetodisableParameter = sourcetodisable.HasValue ?
                new ObjectParameter("sourcetodisable", sourcetodisable) :
                new ObjectParameter("sourcetodisable", typeof(long));
    
            var accesskeyParameter = accesskey != null ?
                new ObjectParameter("accesskey", accesskey) :
                new ObjectParameter("accesskey", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("disablesource", sourcetodisableParameter, accesskeyParameter, statusParameter);
        }
    
        public virtual ObjectResult<GetSourceList_Result> GetSourceList(string accesskey)
        {
            var accesskeyParameter = accesskey != null ?
                new ObjectParameter("accesskey", accesskey) :
                new ObjectParameter("accesskey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSourceList_Result>("GetSourceList", accesskeyParameter);
        }
    
        public virtual ObjectResult<LoginUser_Result> LoginUser(string user_id, string pass, ObjectParameter token)
        {
            var user_idParameter = user_id != null ?
                new ObjectParameter("user_id", user_id) :
                new ObjectParameter("user_id", typeof(string));
    
            var passParameter = pass != null ?
                new ObjectParameter("pass", pass) :
                new ObjectParameter("pass", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LoginUser_Result>("LoginUser", user_idParameter, passParameter, token);
        }
    
        public virtual int uspRandChars(Nullable<int> len, Nullable<byte> min, Nullable<byte> range, string exclude, ObjectParameter output)
        {
            var lenParameter = len.HasValue ?
                new ObjectParameter("len", len) :
                new ObjectParameter("len", typeof(int));
    
            var minParameter = min.HasValue ?
                new ObjectParameter("min", min) :
                new ObjectParameter("min", typeof(byte));
    
            var rangeParameter = range.HasValue ?
                new ObjectParameter("range", range) :
                new ObjectParameter("range", typeof(byte));
    
            var excludeParameter = exclude != null ?
                new ObjectParameter("exclude", exclude) :
                new ObjectParameter("exclude", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRandChars", lenParameter, minParameter, rangeParameter, excludeParameter, output);
        }
    
        public virtual ObjectResult<GetCurrencyRate_Result> GetCurrencyRate(string fromCurr, string toCurr, Nullable<long> sourceid, string accesskey, ObjectParameter status)
        {
            var fromCurrParameter = fromCurr != null ?
                new ObjectParameter("fromCurr", fromCurr) :
                new ObjectParameter("fromCurr", typeof(string));
    
            var toCurrParameter = toCurr != null ?
                new ObjectParameter("toCurr", toCurr) :
                new ObjectParameter("toCurr", typeof(string));
    
            var sourceidParameter = sourceid.HasValue ?
                new ObjectParameter("sourceid", sourceid) :
                new ObjectParameter("sourceid", typeof(long));
    
            var accesskeyParameter = accesskey != null ?
                new ObjectParameter("accesskey", accesskey) :
                new ObjectParameter("accesskey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCurrencyRate_Result>("GetCurrencyRate", fromCurrParameter, toCurrParameter, sourceidParameter, accesskeyParameter, status);
        }
    }
}
